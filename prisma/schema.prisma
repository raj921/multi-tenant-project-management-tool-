// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  organizations Organization[]
  projects     Project[]
  tasks        Task[]
  comments     TaskComment[]

  @@map("users")
}

model Organization {
  id           String   @id @default(cuid())
  name         String
  slug         String   @unique
  contactEmail String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  ownerId   String
  owner     User   @relation(fields: [ownerId], references: [id])
  projects  Project[]
  
  @@map("organizations")
}

model Project {
  id                  String      @id @default(cuid())
  name                String
  description         String?
  status              ProjectStatus @default(ACTIVE)
  dueDate             DateTime?
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  
  // Counters and calculations
  taskCount           Int         @default(0)
  completedTasksCount Int         @default(0)
  completionRate      Int         @default(0)

  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdBy      String
  creator        User         @relation(fields: [createdBy], references: [id])
  tasks          Task[]
  
  @@map("projects")
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  status      TaskStatus  @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  assigneeEmail String?
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  createdBy String
  creator   User   @relation(fields: [createdBy], references: [id])
  comments  TaskComment[]
  
  @@map("tasks")
}

model TaskComment {
  id        String   @id @default(cuid())
  content   String
  timestamp DateTime @default(now())
  
  // Relations
  taskId    String
  task      Task    @relation(fields: [taskId], references: [id])
  authorId  String
  author    User    @relation(fields: [authorId], references: [id])
  
  @@map("task_comments")
}

// Enums
enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}